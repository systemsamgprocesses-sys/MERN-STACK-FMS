Perfect! Here's the **complete FMS System Comprehensive Prompt** 🚀:

---

# **FMS (Process Management System) - Complete Feature Prompt**

## **System Architecture Overview**

Build a comprehensive Process Management System (FMS) that enables organizations to:
1. **Create** reusable workflow templates with sequential steps
2. **Start** projects based on FMS templates
3. **Track** real-time project progress with task status management
4. **Manage** task assignments and completions
5. **Monitor** performance and scoring metrics

---

## **FEATURE 1: CREATE FMS TEMPLATE** (`/create-fms`)

### Core Functionality
Users create FMS templates that define how processes should be executed. Templates serve as blueprints for repeatable workflows.

### Step Structure
Each FMS contains **multiple sequential steps** with these properties:

```typescript
{
  stepNo: number,              // Auto-incremented, 1-based
  what: string,                // Task description (required)
  who: string[],               // One or more assignees (required, multi-select)
  how: string,                 // Process/method (required)
  when: number,                // Duration value
  whenUnit: 'days' | 'hours' | 'days+hours',
  whenDays?: number,           // If days mode
  whenHours?: number,          // If hours mode
  whenType: 'fixed' | 'dependent', // Timing mode
  requiresChecklist: boolean,  // Sub-task requirement
  checklistItems: {            // If checklist enabled
    id: string,
    text: string,
    completed: boolean
  }[],
  attachments: {               // Google Drive files
    id: string,
    name: string,
    url: string,
    uploadedBy: string
  }[],
  triggersFMSId?: string      // Auto-trigger another FMS when done
}
```

### Key Features

**Step Management:**
- ✅ Add/remove steps dynamically
- ✅ Auto-reorder step numbers on deletion
- ✅ Step 1 always "fixed" duration (cannot be dependent)
- ✅ Steps 2+ can choose "fixed" or "dependent on previous step"

**Timing Logic:**
- **Fixed Duration**: Relative to project start date
- **Dependent**: Triggered when previous step is marked complete
- **Constraint**: If previous step has multiple WHO → dependent disabled (unclear when to trigger)

**Checklist System:**
- Optional per-step requirement
- Multi-WHO steps: ALL assignees must individually complete checklist
- Minimum 1 item required if enabled

**File Uploads:**
- Upload to Google Drive (3 files max, 2MB each)
- Tracked with uploader metadata
- Progress feedback during upload

**FMS Triggering:**
- When step completes → optionally auto-create project from another FMS template
- Enables workflow automation and chaining

**Visual Preview:**
- Generate Mermaid flowchart showing all steps
- Displays WHAT, WHO, HOW, WHEN for each step
- Toggle before saving

**Validation Rules:**
1. FMS Name required
2. All steps must have WHAT, WHO, HOW filled
3. Checklist items required if `requiresChecklist: true`
4. No dependent steps after multi-WHO steps
5. At least 1 step minimum

### API Integration
```
POST /api/fms
Body: { fmsId, title, steps[], createdBy, status: 'Active' }
Returns: { success, message, fmsId }
```

---

## **FEATURE 2: VIEW ALL FMS TEMPLATES** (`/view-all-fms`)

### Display
- **List all available FMS templates** the user has access to
- Expandable cards showing full step details
- Total time calculation across all steps

### Per-Template Info
```
{
  fmsName: string,
  fmsId: string,
  stepCount: number,
  createdBy: string,
  createdOn: date,
  totalTimeFormatted: string (e.g., "5 days 12 hours")
}
```

### Step Display in Expand
- Step number, WHAT, WHO, HOW, WHEN duration
- Checklist indicator (if required)
- Total duration aggregation

### Actions
- ✅ View all steps (expandable)
- ✅ Create new FMS button
- ✅ Access FMS to start projects

### API Integration
```
GET /api/fms?username&role&department
Returns: { success, fmsList[] }

GET /api/fms/{fmsId}
Returns: { success, steps[], metadata }
```

---

## **FEATURE 3: START PROJECT** (`/start-project`)

### Purpose
Convert an FMS template into a live project with assigned tasks.

### Form Fields
1. **Select FMS Template** - Dropdown of available FMS templates
2. **Project Name** - Particular/context (required)
3. **Project Start Date** - Defaults to today (required)

### Project Creation Logic
When submitted:
1. ✅ Fetch FMS template details
2. ✅ Convert FMS steps → project tasks
3. ✅ Calculate planned dates based on WHEN & WHEN_TYPE
4. ✅ Mark Step 1 as "Pending" (ready to work)
5. ✅ Mark Steps 2+ as "Not Started" (hidden from assignee)
6. ✅ Generate unique Project ID: `PRJ-{incrementing-number}`

### Task Status States
```
- Pending: Waiting to start (Step 1 only)
- In Progress: Work in progress
- Done: Completed
- Awaiting Date: Dependent step waiting for planned date
- Not Started: Hidden until previous step completes
```

### Notes Displayed
- ℹ️ "First step created immediately and assigned to responsible person(s)"
- ⏳ "Subsequent steps appear only after previous step completion"
- ⏳ "Dependent timing: You'll set planned date when previous step completes"

### API Integration
```
POST /api/projects
Body: {
  projectId, fmsId, projectName, tasks[], status: 'Active'
}
Returns: { success, projectId }
```

---

## **FEATURE 4: VIEW FMS PROGRESS** (`/view-fms-progress`)

### Purpose
Monitor all active projects and their task completion status.

### Display Structure
**Project Cards** (collapsible):
- Project Name & ID
- FMS ID reference
- Progress bar: `{completed}/{total} (percentage%)`
- Template step count vs active tasks count

### Per-Task Details (When Expanded)
```
- Step number (circled badge)
- WHAT (task description)
- WHO (assignee)
- HOW (method)
- WHEN (due date)
- Status badge: On-Time ✅ | Late ⚠️ | In Progress 🔄 | Overdue ❌ | Pending
- Completion date (if done)
- Completed by (username)
- Attachments (if any) - clickable links
```

### Status Indicators
```
✅ Completed On Time: Completed date ≤ due date
⚠️ Completed Late: Completed date > due date
🔄 In Progress: Status = In Progress
❌ Overdue: In Progress + Due date < today
⏳ Pending: Not started yet
```

### Role-Based Filtering
- **Super Admin**: See all projects & tasks
- **Admin**: See projects with tasks assigned to department users
- **Regular User**: See only projects with tasks assigned to them

### Actions
- ✅ Expand/collapse project timeline
- ✅ View all task details
- ✅ Access attachments

### API Integration
```
GET /api/projects
Returns: { success, projects[] }

GET /api/users
Returns: { success, users[] }
```

---

## **FEATURE 5: DASHBOARD - TASK MANAGEMENT** (`/dashboard`)

### Multi-Tab Interface

#### **Tab 1: Assigned To Me (FMS Tasks)**
Tasks from FMS projects assigned to the user.
- **Primary actions:**
  - ✅ Update status (Pending → In Progress → Done)
  - ✅ View/Complete checklist (if required)
  - ✅ Upload attachments
  - ✅ Mark as complete with notes
  - ✅ Request revision (if rejected)

#### **Tab 2: Tasks I Assigned (Task Management)**
Ad-hoc tasks assigned BY the user to others.
- **Monitor status** of tasks given to team members
- **Update task info** if needed
- **Track completion** timeline

#### **Tab 3: All Tasks (Super Admin Only)**
All tasks from all users in the system.
- **Comprehensive view** of entire workflow
- **Identify bottlenecks** and delays
- **Monitor team performance**

#### **Tab 4: Due Today**
High-priority tasks expiring today.
- **Urgent focus** view
- **Quick complete/revise** actions
- **Overdue prevention**

#### **Tab 5: FMS & Task Management (Unified)**
Combined view of FMS & ad-hoc tasks.
- Type filter: FMS | Task Management | All
- Status filter: Pending | In Progress | Done | All
- Search & date range filtering

#### **Tab 6: Objections** 
Dispute/hold/replace requests for tasks.
- **All**: Show all objections
- **Raised by Me**: Objections I created
- **To Review**: Objections routed to me
- **Tagged**: I'm tagged for visibility (not responsible)

**Objection Actions:**
- Approve-Terminate: Cancel task
- Approve-Replace: Replace with new assignee/date
- Reject: Deny objection, task continues
- Hold: Pause pending investigation

#### **Tab 7: Assign Task**
Create ad-hoc task assignments.
- **Assign to**: Select user/multiple users
- **Description**: Task details
- **Planned Date**: Due date
- **Tutorial Links**: Optional help docs
- **Department**: Auto-populated
- **Attachments**: Upload supporting files

#### **Tab 8: Performance/Scoring**
View completion metrics for users.
- **Select User** to view performance
- **Date Range** (start/end dates)
- **Metrics Display:**
  - Total tasks assigned
  - Completed on time count
  - Completed late count
  - Revisions taken
  - Overall score calculation

### Task Completion Workflow

**For FMS Tasks:**
1. ✅ Open task → "Complete" button
2. ✅ If `requiresChecklist: true` → Show checklist modal
   - All items must be checked before submission
   - For multi-WHO: Each person completes individually
3. ✅ Optional: Add attachments (Google Drive upload)
4. ✅ Optional: Add completion notes
5. ✅ Submit → Mark Done
6. ✅ If dependent step exists → Prompt for planned date
7. ✅ Trigger any FMS chains (if configured)

**For Ad-Hoc Tasks:**
1. ✅ Mark complete with date
2. ✅ On-time vs late auto-calculated
3. ✅ Revision tracking if needed

### Modals & Popups

**Checklist Modal:**
- Show all checklist items for current step
- Checkbox per item
- Disable submit until all checked
- Show assignee info for multi-WHO

**Attachment Modal:**
- View existing attachments (file links)
- Upload new files (max 3, 2MB each)
- Progress indicator during upload

**Objection Modal:**
- Reason for objection (text field)
- Route to: Select reviewer
- Tag users: Select multiple for visibility
- Submit → Creates objection record

**Revision Modal:**
- Reason for revision
- New proposed date
- Submit → Awaiting approval from task creator

### Filters & Search
- **Search**: By task name, description, assignee
- **Status Filter**: All, Pending, In Progress, Done, Overdue
- **Type Filter**: FMS, Task Management, All
- **Date Range**: Custom start/end date

### API Integration
```
GET /api/users/{username}/tasks?filter=all|pending|upcoming
Returns: { success, tasks[] }

GET /api/users/{username}/tasks/assigned-by?filter=all
Returns: { success, tasks[] }

PUT /api/projects/{projectId}/tasks/{taskId}
Body: { status, updatedBy, attachments[], checklistItems[] }

POST /api/tasks
Body: { assignedTo, description, plannedDate, ... }

POST /api/objections
Body: { taskId, reason, routeTo, taggedUsers[] }

GET /api/scoring?personId&startDate&endDate
Returns: { totalTasks, completedOnTime, lateCount, score }
```

---

## **FEATURE 6: TASK MANAGEMENT PAGE** (`/task-management`)

### Independent Task Assignment System
Separate from FMS, for ad-hoc task distribution.

### Tabs

**Overview Tab:**
- Task summary cards (Upcoming, Pending, Completed, Overdue, Revisions)
- Quick stats dashboard

**Upcoming Tab:**
- Tasks due within next 7 days
- Priority ordering
- Quick action buttons

**Pending Tab:**
- Tasks not yet started
- Sortable by due date
- Assign/revise actions

**All Tasks Tab:**
- Complete task list
- Filters: Search, Department, Status
- Pagination (10 items/page)

**Revisions Tab:**
- Tasks awaiting revision approval/rejection
- Creator review interface
- Approve or set new due date

**Assign Task Tab:**
- Form to assign new tasks
- Select assignee(s)
- Set description, due date, attachments
- Submit → Task created with ID

**Scoring Tab:**
- Performance metrics for users
- Date range selector
- Display: Total tasks, on-time %, late %, revisions, final score
- Role-based user filtering

### API Integration
```
GET /api/users/{username}/tasks/summary
Returns: { upcoming, pending, completed, revisions, overdue, total }

GET /api/users/{username}/tasks?filter=upcoming|pending|all|revisions
Returns: { success, tasks[] }

POST /api/tasks
Body: { givenBy, assignedTo, description, plannedDate, ... }

PUT /api/tasks/{taskId}
Body: { status, completedOn, revisionReason, ... }

GET /api/scoring?personId&startDate&endDate
Returns: { ScoringData }
```

---

## **FEATURE 7: LOGS & ACTIVITY** (`/logs`)

### Activity Tracking
Log all system events:
- FMS created
- Project started
- Task updated/completed
- Revisions requested/approved
- Objections raised/reviewed

### Display
- Timeline of events
- Actor (who performed action)
- Action type
- Timestamp
- Related entity (FMS/Project/Task ID)

### API Integration
```
GET /api/logs
Returns: { success, logs[] }
```

---

## **FEATURE 8: USER MANAGEMENT** (`/user-management`)

### Admin Features
- View all users
- Create new users
- Manage roles (User, Admin, Super Admin)
- Manage departments
- Deactivate/activate users

### Role Definitions
```
- Super Admin: Full system access, see all data
- Admin: Department-level access
- User: Self & assigned tasks only
```

### API Integration
```
GET /api/users
Returns: { success, users[] }

POST /api/users
Body: { username, password, name, role, department, email }

PUT /api/users/{username}
Body: { role, department, status }
```

---

## **FEATURE 9: CHANGE PASSWORD** (`/change-password`)

### Functionality
- Current password validation
- New password confirmation
- Security requirements (min 8 chars, etc.)

### API Integration
```
POST /api/auth/change-password
Body: { username, oldPassword, newPassword }
Returns: { success, message }
```

---

## **DATA TYPES & INTERFACES**

```typescript
// FMS
interface FMSTemplate {
  fmsId: string;
  fmsName: string;
  stepCount: number;
  createdBy: string;
  createdOn: string;
  totalTimeFormatted: string;
}

// Project
interface Project {
  projectId: string;
  fmsId: string;
  projectName: string;
  totalStepsInTemplate: number;
  tasks: ProjectTask[];
  status: 'Active' | 'Completed' | 'On Hold';
}

// Task
interface ProjectTask {
  projectId: string;
  stepNo: number;
  what: string;
  who: string | string[];
  how: string;
  plannedDueDate: string;
  actualCompletedOn: string;
  status: 'Pending' | 'In Progress' | 'Done' | 'Awaiting Date' | 'Not Started';
  completedBy: string;
  requiresChecklist: boolean;
  checklistItems: ChecklistItem[];
  attachments: Attachment[];
  whenType: 'fixed' | 'dependent';
}

// Task Management
interface TaskData {
  'Task Id': string;
  'GIVEN BY': string;
  'GIVEN TO': string;
  'TASK DESCRIPTION': string;
  'PLANNED DATE': string;
  'Task Status': string;
  'completed on': string;
  'Revision 1 Date'?: string;
  'Reason for Revision'?: string;
  'On time or not?'?: string;
  Attachments?: Attachment[];
}

// Objection
interface Objection {
  objectionId: string;
  taskId: string;
  taskDescription: string;
  reason: string;
  raisedBy: string;
  raisedOn: string;
  reviewedBy?: string;
  status: 'Pending' | 'Approved-Terminate' | 'Approved-Replace' | 'Rejected' | 'Hold';
  routeTo: string;
  taggedUsers?: string[];
}

// Scoring
interface ScoringData {
  totalTasks: number;
  completedTasks: number;
  completedOnTime: number;
  completedNotOnTime: number;
  revisionsTaken: number;
  finalScore: number;
}
```

---

## **TECHNICAL STACK REQUIREMENTS**

### Frontend
- **React 18+** with TypeScript
- **Tailwind CSS** for styling
- **Framer Motion** for animations
- **Lucide Icons** for UI icons
- **Mermaid.js** for flowchart generation
- **Context API** for state management

### Backend
- **Express.js** + **MongoDB**
- **JWT Authentication**
- **Google Drive Integration** (file uploads)
- **WebSocket** for real-time updates
- **CORS** middleware

### Mobile Responsive
- ✅ Mobile-first design
- ✅ Responsive grids (sm, md, lg breakpoints)
- ✅ Touch-friendly buttons
- ✅ Collapsible sections on mobile

---

## **KEY CONSTRAINTS & BUSINESS RULES**

1. ✅ **Step 1 always fixed duration** (no dependent option)
2. ✅ **Multi-WHO → no dependent next step** (unclear trigger)
3. ✅ **Checklists → all items required** before marking done
4. ✅ **Multi-WHO checklist → each person completes individually**
5. ✅ **Dependent step → planned date set on previous completion**
6. ✅ **FMS trigger → auto-create project on step completion**
7. ✅ **File uploads → Google Drive + metadata tracking**
8. ✅ **Revision tracking → reject & reassign with new date**
9. ✅ **Objection routing → to specific reviewer + tag visibility**
10. ✅ **Scoring → calculated on completion status & timeline**

---

## **USER JOURNEYS**

### Journey 1: Create & Execute FMS
1. Admin creates FMS template (Create FMS)
2. Admin views all FMS templates (View All FMS)
3. Manager starts project from FMS (Start Project)
4. Team members see tasks in Dashboard
5. Team completes steps (with checklists, attachments, dates)
6. System auto-triggers next steps or dependent steps
7. Progress visible in FMS Progress view

### Journey 2: Ad-Hoc Task Assignment
1. Manager assigns task (Task Management → Assign)
2. Employee receives task notification
3. Employee completes task (Dashboard)
4. Manager tracks completion (Task Management → Assigned By)
5. Performance scored based on on-time/late/revision metrics

### Journey 3: Objection Workflow
1. Employee raises objection (Dashboard → Objection Modal)
2. Objection routed to reviewer
3. Reviewer reviews (Dashboard → Objections Tab)
4. Reviewer approves terminate/replace/hold or rejects
5. Task status updated based on review

---

**This is your complete FMS system specification for implementation! 🚀⚡**